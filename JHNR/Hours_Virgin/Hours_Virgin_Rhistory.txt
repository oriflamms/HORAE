######################################################################################################### 
#########################################################################################################
#########################################################################################################
######## 																						#########
######## 								HOURS OF THE VIRGIN										#########
######## 	Data preparation from CSV export of Heurist Database (entities "useItem" = t:93)	#########
######## 																						#########
#########################################################################################################
######################################################################################################### 
######################################################################################################### 


#-----------------------------------------------------------------------------------------------------------------------
### Libraries
install.packages(c("tidyverse", "dplyr", "MASS", "ggplot2", "gridExtra", "stringr", "network", "ggnetwork", "plotly", "ggrepel", "ggforce"))
library(tidyverse)
library(dplyr)
library(MASS)
library(ggplot2)
library(gridExtra)
library(stringr)
library(network)
library(ggnetwork)
library(plotly)
library(ggrepel)
library(ggforce)

#----------------------------------------------------------------------------------------------------------------------
### Data preparation

rm(list = ls())
setwd("C:/Users/stutzmann/Documents/GitHub/HORAE/Hours_Virgin") #Set the working directory
use <- read.csv("rectype-93.csv", header = TRUE, fileEncoding = "UTF-8")
#use <- read.csv("rectype-93-Baltimore.csv", header = TRUE, fileEncoding = "UTF-8")
head(use)
colnames(use) <- c("useItem", "Position","s", "rec_Title", "Work", "Work.RecordTitle", "UseID", "Use")
use[,8] <- substring(use[,8],24,nchar(use[,8]))
use[,8] <- gsub(",", "", use[,8])
use[,2] <- gsub(" ", "", use[,2])

#----------------------------------------------------------------------------------------------------------------------
### Equivalent of "NA" : rectype-93 linked to Work.H.ID 395430 (Not Identified) and to 708938 (Expected but not attested)

use <- use %>% filter(Work != "395430") %>% filter(Work != "708938") %>% filter(Position !="")
use <- use %>% filter(grepl("-", Position))
use$position.work <- paste(use$Position, use$Work, sep="_")

#----------------------------------------------------------------------------------------------------------------------
### Creation of edges

use.useItem1 <- use %>%
  group_by(Use) %>%
  summarize(positions = list(Position))
  
use.useItem2 <- use %>%
  group_by(Use) %>%
  summarize(position.work = list(position.work))

use.useItem <- cbind(use.useItem1, use.useItem2)

	# for the record:
	# summarize(position.work = list(c(Position, Work)))  								#list all [Position] and then all [Work]
	# summarize(position.work = list(mapply(list, Position, Work, SIMPLIFY=FALSE)))		#list all elements in the right order ([Position]1, [Work]1, [Position]2, [Work]2 etc.)
	# summarize(position.work = list(mapply(c, Position, Work, SIMPLIFY=FALSE)))		#creates a list for each use containing multiple lists with two elements [Position] [Work]

rownames(use.useItem) <- use.useItem$Use

df <- use.useItem										# we set a short name to use the following command

df.edges <- setNames(combn(1:nrow(df), 
		2, 
		FUN = function(i) 
		length(intersect(unique(df[i[1],]$position.work[[1]]),unique(df[i[2],]$position.work[[1]])))			#percentage of common texts among common positions for which texts are known
		/ 
		length(intersect(unique(df[i[1],]$positions[[1]]),unique(df[i[2],]$positions[[1]]))) * 100
		), 
		combn(rownames(df), 2, toString)
		)
df.edges <- as.data.frame(df.edges)

edges <- as.data.frame(cbind(str_split_fixed(rownames(df.edges), ", ", 2), df.edges$df.edges))				#requires library(stringr)
colnames(edges) <- c("from", "to", "weight")
edges$weight <- as.double(edges$weight)
write.csv(edges, "edgesHoursVirgin.csv", fileEncoding="utf-8", row.names=FALSE)
# write.csv(edges, "edgesHoursVirgin-Baltimore.csv", fileEncoding="utf-8", row.names=FALSE)

edges.sup70 <- edges %>% filter(weight > 70)

write.csv(edges.sup70, "edgesHoursVirgin.sup70.csv", fileEncoding="utf-8", row.names=FALSE)
# write.csv(edges.sup70, "edgesHoursVirgin.sup70-Baltimore.csv", fileEncoding="utf-8", row.names=FALSE)

#----------------------------------------------------------------------------------------------------------------------
# Plot Network	

set.seed(1977)
net <- network(as.data.frame(edges.sup70), directed=FALSE)  # vertex.attr=as.data.frame(nodes) : nodes are not declared, because the matching on rownames seems to be not working


set.seed(1977)
g <- ggplot(ggnetwork(net, layout="fruchtermanreingold", na.rm=TRUE), #layout choice: kamadakawai, fruchtermanreingold
	aes(x, y, xend = xend, yend = yend, label = Use)) + 
	geom_edges(color = "grey50", arrow = arrow(length = unit(0, "pt"), type = "closed"), size=0.2) + 	# size=aes(size=weights)
	geom_nodes(size = 1, color = "darkred") +
	geom_nodetext(size=2, color="grey25") 															# check_overlap = TRUE
	# geom_edgetext(aes(label = weight), color = "grey25", size=1, fill="white")
	# theme_blank()
g
ggplotly(g)

ggsave("Hours_Virgin.sup70.tif", plot=g, dpi=500, device="tiff", width=10, height=10) 



#----------------------------------------------------------------------------------------------------------------------
# Plot Network	
# Removing "Tours 1501-1600, which appears to be central but late

network.Use(net)											# identifying the "id" corresponding to the "vertex.name"	
net2 <- delete.vertices(net, 129)									# deleting vertex 129  = "Tours [1501 to 1600]"
# net2 <- delete.vertices(net, 134)													# idem for network with Baltimore W.166 and W.169
network.Use(net2)											# checking deletion complete


set.seed(1977)
h <- ggplot(ggnetwork(net2, layout="fruchtermanreingold", na.rm=TRUE), #layout choice: kamadakawai, fruchtermanreingold
	aes(x, y, xend = xend, yend = yend, label = Use)) + 
	geom_edges(color = "grey50", arrow = arrow(length = unit(0, "pt"), type = "closed"), size=0.2) + 	# size=aes(size=weights)
	geom_nodes(size = 1, color = "lightgreen") +
	geom_nodetext(size=2, color="grey25") 															# check_overlap = TRUE
	# geom_edgetext(aes(label = weight), color = "grey25", size=1, fill="white")
	# theme_blank()
h
ggplotly(h)

ggsave("Hours_Virgin.sup70.withoutTours16.tif", plot=h, dpi=500, device="tiff", width=10, height=10) 
# ggsave("Hours_Virgin.sup70.withoutTours16-Baltimore.tif", plot=h, dpi=500, device="tiff", width=10, height=10) 



#----------------------------------------------------------------------------------------------------------------------
# Plot Network	: adding annotations and ellipses
datapoints <- as.data.frame(h$data)
dataGermany <- datapoints %>% 
	filter(str_detect(Use,"^Konstanz")|
		str_detect(Use,"^Utrecht")|
		str_detect(Use,"^Regensburg")|
		str_detect(Use,"^Würtzburg")|
		str_detect(Use,"^Köln")|
		str_detect(Use,"^Mainz")|
		str_detect(Use,"^Bremen"))
dataSFrance1 <- datapoints %>% 
	filter(x > 0.34, x < 0.47, y < 0.2, y > 0.04)
dataSFrance2 <- datapoints %>% 
	filter(x > 0.03, x < 0.35, y > 0.22, y < 0.58)
dataNFrance1 <- datapoints %>% 
	filter(x > 0.568, x < 0.8384, y > 0.538, y < 0.7547)
dataEFrance1 <- datapoints %>% 
	filter(x > 0.729, x < 0.8655, y > 0.1399, y < 0.299)
dataNormandie <- datapoints %>% 
	filter(x > 0.539, x < 0.6626, y > 0.82, y < 0.9245)
dataBrugge <- datapoints %>% 
	filter(str_detect(Use,"^Brugge"))
dataBaltimore <- datapoints %>% 
	filter(str_detect(Use,"^Baltimore"))

z <- h + 
	geom_point(data = dataGermany, aes(x = x, y = y, label=Use), alpha = 0.5, color = "blue") +
	geom_mark_ellipse(data = dataGermany, aes(x = x, y = y, label="Germany"), 
			label.buffer = unit(-7, 'mm'), label.fontsize = 12, label.colour = "blue", label.fill = FALSE,
			con.colour = "blue", con.size = 0.5, con.linetype = 0,
  			alpha = 0.5, color = "blue") +
	geom_point(data = dataSFrance1, aes(x = x, y = y), alpha = 0.5, color = "pink") +
	geom_mark_ellipse(data = dataSFrance1, aes(x = x, y = y, label="Southern France 1"), 
			label.buffer = unit(-7, 'mm'), label.fontsize = 12, label.colour = "pink", label.fill = FALSE,
			con.colour = "pink", con.size = 0.5, con.linetype = 0,
 			alpha = 1, color = "pink") +
	geom_point(data = dataSFrance2, aes(x = x, y = y), alpha = 0.5, color = "purple") +
	geom_mark_rect(data = dataSFrance2, aes(x = x, y = y, label="Southern France 2 and Spain"), 
			label.buffer = unit(-7, 'mm'), label.fontsize = 12, label.colour = "purple", label.fill = FALSE,
			con.colour = "purple", con.size = 0.5, con.linetype = 0,
 			alpha = 0.5, color = "purple",
			expand=unit(-1, 'mm')) +
	geom_point(data = dataNFrance1, aes(x = x, y = y), alpha = 0.5, color = "orange") +
	geom_mark_ellipse(data = dataNFrance1, aes(x = x, y = y, label="Northern France and Low Countries"), 
			label.buffer = unit(-7, 'mm'), label.fontsize = 12, label.colour = "orange", label.fill = FALSE,
			con.colour = "orange", con.size = 0.5, con.linetype = 0,
 			alpha = 0.5, color = "orange") +
	geom_point(data = dataEFrance1, aes(x = x, y = y), alpha = 0.5, color = "darkorange") +
	geom_mark_ellipse(data = dataEFrance1, aes(x = x, y = y, label="Old Benedictine abbeys \n in Eastern and Northern France"), 
			label.buffer = unit(-7, 'mm'), label.fontsize = 12, label.colour = "darkorange", label.fill = FALSE, 
			con.colour = "darkorange", con.size = 0.5, con.linetype = 0,
 			alpha = 0.5, color = "darkorange") +
	geom_point(data = dataNormandie, aes(x = x, y = y), alpha = 0.5, color = "darkgreen") +
	geom_mark_ellipse(data = dataNormandie, aes(x = x, y = y, label="Normandy and Brittany"), 
			label.buffer = unit(-7, 'mm'), label.fontsize = 12, label.colour = "darkgreen", label.fill = FALSE,
			con.colour = "darkgreen", con.size = 0.5, con.linetype = 0,
 			alpha = 0.5, color = "darkgreen") +
	geom_point(data = dataBrugge, aes(x = x, y = y), alpha = 1, color = "red", shape=1, size=6) +
#	geom_point(data = dataBaltimore, aes(x = x, y = y), alpha = 1, color = "red", shape=2, size=6) + 
#	xlim(0.196,0.35) + ylim(0.602,0.943) +
	theme_blank()
z

ggplotly(z)

ggsave("Hours_Virgin.sup70.withoutTours16.tif", plot=z, dpi=500, device="tiff", width=10, height=10) 
#ggsave("Hours_Virgin.sup70.withoutTours16.withBaltimore.focus.tif", plot=z, dpi=500, device="tiff", width=10, height=10) 


#-----------------------------------------------------------------------------------------------------------
AroundBaltimore <- use %>% filter(str_detect(Use,"^Baltimore")|str_detect(Use,"^Thérouanne")|str_detect(Use,"^Noyon")|str_detect(Use,"^Arras")|str_detect(Use,"^Cambrai"))
write.csv(AroundBaltimore, "Baltimore-and-friends.csv")

